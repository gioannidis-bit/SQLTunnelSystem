@using Newtonsoft.Json

@model SqlTunnelWebClient.Models.SqlViewModel
@inject SqlTunnelWebClient.Services.SettingsService SettingsService

@{
    ViewData["Title"] = "SQL Query Executor";
    var settings = SettingsService.GetSettings();
}


<div class="container">
   


    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (Model.SelectedAgent != null)
    {
        <div class="card mb-4">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5>Selected SQL Agent</h5>
                <a href="@Url.Action("Index", "Home")" class="btn btn-sm btn-outline-primary">
                    <i class="bi bi-arrow-left"></i> Change Agent
                </a>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6">
                        <h6>@Model.SelectedAgent.DisplayName</h6>
                        <p>@Model.SelectedAgent.Description</p>
                        <p>
                            <span class="badge bg-info">Version: @Model.SelectedAgent.Version</span>
                            <span class="badge @(Model.SelectedAgent.IsActive ? "bg-success" : "bg-danger")">
                                @(Model.SelectedAgent.IsActive ? "Online" : "Offline")
                            </span>
                        </p>
                    </div>
                    <div class="col-md-6">
                        <h6>Connection Info</h6>
                        <p class="text-muted small">@Model.SelectedAgent.ServerInfo</p>
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="alert alert-info mb-4">
            <h5>No specific SQL agent selected</h5>
            <p>
                The query will be executed on any available agent.
                <a href="@Url.Action("Index", "Home")" class="alert-link">Select a specific agent</a> for more control.
            </p>
        </div>
    }

    <!-- Χρήσιμο για αποσφαλμάτωση, αφαιρέστε σε παραγωγή -->
    <div class="alert alert-info mb-3">
        <strong>Debug info:</strong> Current settings from cookie:
        RelayServerUrl: @settings.RelayServerUrl,
        ApiKey: @settings.ApiKey
    </div>

  


    <!-- Φόρμα εκτέλεσης SQL query -->
    <form asp-action="ExecuteQuery" method="post">

        <input type="hidden" asp-for="RelayServerUrl" />
        <input type="hidden" asp-for="ApiKey" />
        <input type="hidden" asp-for="ServiceId" />

        <div class="card mb-4">
            <div class="card-header">
                <h5>SQL Query</h5>
            </div>
            <div class="card-body">
                <div class="mb-3">
                    <textarea asp-for="Query" class="form-control" rows="5" placeholder="Enter your SQL query here..."></textarea>
                </div>

                <div class="form-check mb-3">
                    <input asp-for="ShowParameters" class="form-check-input" id="showParameters" />
                    <label asp-for="ShowParameters" class="form-check-label">Use Parameters</label>
                </div>

                <div id="parametersSection" style="display: @(Model.ShowParameters ? "block" : "none");">
                    <div class="card">
                        <div class="card-body">
                            <h6 class="card-subtitle mb-3">Parameters</h6>

                            <div id="parameters">
                                @if (Model.Parameters != null)
                                {
                                    for (int i = 0; i < Model.Parameters.Count; i++)
                                    {
                                        <div class="row mb-2 align-items-end">
                                            <div class="col-md-3">
                                                <label class="form-label">Name:</label>
                                                <input asp-for="Parameters[i].Name" class="form-control" placeholder="e.g. @@ProductId" />
                                            </div>
                                            <div class="col-md-2">
                                                <label class="form-label">Type:</label>
                                                <select asp-for="Parameters[i].Type" class="form-select">
                                                    <option value="String">String</option>
                                                    <option value="Int">Int</option>
                                                    <option value="Decimal">Decimal</option>
                                                    <option value="DateTime">DateTime</option>
                                                    <option value="Bool">Bool</option>
                                                </select>
                                            </div>
                                            <div class="col-md-4">
                                                <label class="form-label">Value:</label>
                                                <input asp-for="Parameters[i].Value" class="form-control"
                                                       disabled="@Model.Parameters[i].IsNull" />
                                            </div>
                                            <div class="col-md-2">
                                                <div class="form-check">
                                                    <input asp-for="Parameters[i].IsNull" class="form-check-input parameter-null-check" />
                                                    <label asp-for="Parameters[i].IsNull" class="form-check-label">NULL</label>
                                                </div>
                                            </div>
                                            <div class="col-md-1">
                                                <button type="submit" asp-action="RemoveParameter" asp-route-index="@i"
                                                        class="btn btn-sm btn-danger">
                                                    X
                                                </button>
                                            </div>
                                        </div>
                                    }
                                }
                            </div>

                            <button type="submit" asp-action="AddParameter" class="btn btn-sm btn-secondary mt-2">
                                Add Parameter
                            </button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="card-footer">
                <button type="submit" class="btn btn-primary">Execute Query</button>
            </div>
        </div>
    </form>

    @if (!string.IsNullOrEmpty(Model.Error))
    {
        <div class="alert alert-danger mt-4">
            <strong>Error:</strong> @Model.Error
        </div>
    }

    @if (!string.IsNullOrEmpty(Model.Result))
    {
        <div class="card mt-4">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5>Results</h5>
                <div class="export-buttons"></div>
            </div>
            <div class="card-body">
                <div class="row mb-3">
                    <div class="col-md-8">
                        <div class="input-group">
                            <span class="input-group-text">Global Search:</span>
                            <input type="text" id="globalSearch" class="form-control" placeholder="Search across all columns...">
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="input-group">
                            <span class="input-group-text">Page Size:</span>
                            <select id="pageSize" class="form-select">
                                <option value="10">10</option>
                                <option value="25">25</option>
                                <option value="50">50</option>
                                <option value="100">100</option>
                                <option value="-1">All</option>
                            </select>
                        </div>
                    </div>
                </div>
                <div class="table-responsive">
                    <table id="resultsTable" class="table table-striped table-hover">
                        <thead id="resultsTableHead"></thead>
                        <tbody id="resultsTableBody"></tbody>
                    </table>
                </div>
            </div>
        </div>
    }
</div>



@section Scripts {
    <script>
        // Toggle parameters section visibility
        document.getElementById('showParameters').addEventListener('change', function() {
            document.getElementById('parametersSection').style.display = this.checked ? 'block' : 'none';
        });

        // Handle NULL checkboxes
        document.addEventListener('change', function(event) {
            if (event.target.classList.contains('parameter-null-check')) {
                const valueInput = event.target.closest('.row').querySelector('input[name$=".Value"]');
                valueInput.disabled = event.target.checked;
            }
        });

        // Parse and display JSON results with DataTables
        document.addEventListener('DOMContentLoaded', function() {

              $('#globalSearch').on('keyup', function() {
                const table = $('#resultsTable').DataTable();
                table.search(this.value).draw();
            });

               $('#pageSize').on('change', function() {
                const table = $('#resultsTable').DataTable();
                table.page.len(parseInt(this.value)).draw();
            });

            const resultData = @Html.Raw(Model.Result != null ? JsonConvert.SerializeObject(Model.Result) : "null");

            if (resultData) {
                try {
                    const data = JSON.parse(resultData);

                    if (Array.isArray(data) && data.length > 0) {
                        displayTableDataWithDataTables(data);
                    } else if (typeof data === 'object' && data !== null) {
                        displayTableDataWithDataTables([data]);
                    } else {
                        // If empty or not valid structure, just display as text
                        const pre = document.createElement('pre');
                        pre.textContent = JSON.stringify(data, null, 2);
                        document.getElementById('resultsTableBody').innerHTML = '';
                        document.getElementById('resultsTableHead').innerHTML = '';
                        document.getElementById('resultsTableBody').appendChild(pre);
                    }
                } catch (e) {
                    console.error("Error parsing JSON:", e);
                    // If not valid JSON, just display as text
                    const pre = document.createElement('pre');
                    pre.textContent = resultData;
                    document.getElementById('resultsTableBody').innerHTML = '';
                    document.getElementById('resultsTableHead').innerHTML = '';
                    document.getElementById('resultsTableBody').appendChild(pre);
                }
            }
        });

        function displayTableDataWithDataTables(data) {
            if (!data || data.length === 0) return;

            const table = $('#resultsTable');

            // Δημιουργία στηλών πίνακα από τα keys του πρώτου αντικειμένου
            const columns = Object.keys(data[0]).map(key => ({
                title: key,
                data: key
            }));

            // Αν υπάρχει ήδη ένα DataTable instance, το καταστρέφουμε
            if ($.fn.DataTable.isDataTable(table)) {
                table.DataTable().destroy();
            }

            // Καθαρισμός του πίνακα
            table.empty();

            // Δημιουργία του DataTable
            const dataTable = table.DataTable({
                data: data,
                columns: columns,
                pageLength: 10,  // Αριθμός γραμμών ανά σελίδα
                lengthMenu: [[10, 25, 50, 100, -1], [10, 25, 50, 100, "All"]],
                dom: 'Blfrtip',  // B = buttons, l = length menu, f = filter, r = processing, t = table, i = info, p = pagination
                buttons: [
                    {
                        extend: 'collection',
                        text: 'Export',
                        className: 'btn btn-primary dropdown-toggle',
                        buttons: [
                            {
                                extend: 'excelHtml5',
                                text: 'Excel',
                                exportOptions: {
                                    columns: ':visible'
                                },
                                title: 'SQL Query Results - ' + new Date().toLocaleString(),
                                className: 'dropdown-item'
                            },
                            {
                                extend: 'pdfHtml5',
                                text: 'PDF',
                                exportOptions: {
                                    columns: ':visible'
                                },
                                title: 'SQL Query Results - ' + new Date().toLocaleString(),
                                className: 'dropdown-item',
                                orientation: 'landscape'
                            },
                            {
                                extend: 'copyHtml5',
                                text: 'Copy',
                                exportOptions: {
                                    columns: ':visible'
                                },
                                className: 'dropdown-item'
                            },
                            {
                                extend: 'csvHtml5',
                                text: 'CSV',
                                exportOptions: {
                                    columns: ':visible'
                                },
                                className: 'dropdown-item'
                            },
                            {
                                extend: 'print',
                                text: 'Print',
                                exportOptions: {
                                    columns: ':visible'
                                },
                                className: 'dropdown-item'
                            }
                        ]
                    }
                ],
                language: {
                    search: "Filter:",
                    lengthMenu: "Show _MENU_ entries",
                    info: "Showing _START_ to _END_ of _TOTAL_ entries",
                    paginate: {
                        first: "First",
                        last: "Last",
                        next: "Next",
                        previous: "Previous"
                    }
                },
                initComplete: function() {
                    // Μετακίνηση των κουμπιών εξαγωγής στην προσαρμοσμένη περιοχή
                    $('.dt-buttons').detach().appendTo('.export-buttons');
                }
            });

            // Προσθήκη προηγμένου φίλτρου για κάθε στήλη
            $('#resultsTable thead tr').clone(true).appendTo('#resultsTable thead');
            $('#resultsTable thead tr:eq(1) th').each(function(i) {
                const title = $(this).text();
                $(this).html('<input type="text" class="form-control form-control-sm" placeholder="Filter ' + title + '" />');

                $('input', this).on('keyup change', function() {
                    if (dataTable.column(i).search() !== this.value) {
                        dataTable
                            .column(i)
                            .search(this.value)
                            .draw();
                    }
                });
            });
        }
    </script>
}