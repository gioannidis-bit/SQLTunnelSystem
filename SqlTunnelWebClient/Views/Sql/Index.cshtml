@using Newtonsoft.Json

@model SqlTunnelWebClient.Models.SqlViewModel
@inject SqlTunnelWebClient.Services.SettingsService SettingsService

@{
    ViewData["Title"] = "SQL Query Executor";
    var settings = SettingsService.GetSettings();
}


<div class="container">
    <h1 class="my-4">SQL Query Executor</h1>


    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <!-- Χρήσιμο για αποσφαλμάτωση, αφαιρέστε σε παραγωγή -->
    <div class="alert alert-info mb-3">
        <strong>Debug info:</strong> Current settings from cookie:
        RelayServerUrl: @settings.RelayServerUrl,
        ApiKey: @settings.ApiKey
    </div>

    <!-- Φόρμα αποθήκευσης ρυθμίσεων -->
    <form asp-action="SaveSettings" method="post">
        <div class="card mb-4">
            <div class="card-header">
                <h5>Connection Settings</h5>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label asp-for="RelayServerUrl" class="form-label">Relay Server URL:</label>
                        <input asp-for="RelayServerUrl" class="form-control" />
                    </div>
                    <div class="col-md-6 mb-3">
                        <label asp-for="ApiKey" class="form-label">API Key:</label>
                        <input asp-for="ApiKey" class="form-control" />
                    </div>
                </div>
                <div class="row">
                    <div class="col-12 text-end">
                        <button type="submit" class="btn btn-secondary">
                            <i class="bi bi-save"></i> Save Settings
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </form>



    <form asp-action="ExecuteQuery" method="post">

        <input type="hidden" asp-for="RelayServerUrl" />
        <input type="hidden" asp-for="ApiKey" />  
      
        <div class="card mb-4">
            <div class="card-header">
                <h5>SQL Query</h5>
            </div>
            <div class="card-body">
                <div class="mb-3">
                    <textarea asp-for="Query" class="form-control" rows="5" placeholder="Enter your SQL query here..."></textarea>
                </div>

                <div class="form-check mb-3">
                    <input asp-for="ShowParameters" class="form-check-input" id="showParameters" />
                    <label asp-for="ShowParameters" class="form-check-label">Use Parameters</label>
                </div>

                <div id="parametersSection" style="display: @(Model.ShowParameters ? "block" : "none");">
                    <div class="card">
                        <div class="card-body">
                            <h6 class="card-subtitle mb-3">Parameters</h6>

                            <div id="parameters">
                                @if (Model.Parameters != null)
                                {
                                    for (int i = 0; i < Model.Parameters.Count; i++)
                                    {
                                        <div class="row mb-2 align-items-end">
                                            <div class="col-md-3">
                                                <label class="form-label">Name:</label>
                                                <input asp-for="Parameters[i].Name" class="form-control" placeholder="e.g. @@ProductId" />
                                            </div>
                                            <div class="col-md-2">
                                                <label class="form-label">Type:</label>
                                                <select asp-for="Parameters[i].Type" class="form-select">
                                                    <option value="String">String</option>
                                                    <option value="Int">Int</option>
                                                    <option value="Decimal">Decimal</option>
                                                    <option value="DateTime">DateTime</option>
                                                    <option value="Bool">Bool</option>
                                                </select>
                                            </div>
                                            <div class="col-md-4">
                                                <label class="form-label">Value:</label>
                                                <input asp-for="Parameters[i].Value" class="form-control"
                                                       disabled="@Model.Parameters[i].IsNull" />
                                            </div>
                                            <div class="col-md-2">
                                                <div class="form-check">
                                                    <input asp-for="Parameters[i].IsNull" class="form-check-input parameter-null-check" />
                                                    <label asp-for="Parameters[i].IsNull" class="form-check-label">NULL</label>
                                                </div>
                                            </div>
                                            <div class="col-md-1">
                                                <button type="submit" asp-action="RemoveParameter" asp-route-index="@i"
                                                        class="btn btn-sm btn-danger">
                                                    X
                                                </button>
                                            </div>
                                        </div>
                                    }
                                }
                            </div>

                            <button type="submit" asp-action="AddParameter" class="btn btn-sm btn-secondary mt-2">
                                Add Parameter
                            </button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="card-footer">
                <button type="submit" class="btn btn-primary">Execute Query</button>
            </div>
        </div>
    </form>

    @if (!string.IsNullOrEmpty(Model.Error))
    {
        <div class="alert alert-danger mt-4">
            <strong>Error:</strong> @Model.Error
        </div>
    }

    @if (!string.IsNullOrEmpty(Model.Result))
    {
        <div class="card mt-4">
            <div class="card-header">
                <h5>Results</h5>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table id="resultsTable" class="table table-striped table-hover">
                        <thead id="resultsTableHead"></thead>
                        <tbody id="resultsTableBody"></tbody>
                    </table>
                </div>
            </div>
        </div>
    }
</div>



@section Scripts {
    <script>
        // Toggle parameters section visibility
        document.getElementById('showParameters').addEventListener('change', function() {
            document.getElementById('parametersSection').style.display = this.checked ? 'block' : 'none';
        });

        // Handle NULL checkboxes
        document.addEventListener('change', function(event) {
            if (event.target.classList.contains('parameter-null-check')) {
                const valueInput = event.target.closest('.row').querySelector('input[name$=".Value"]');
                valueInput.disabled = event.target.checked;
            }
        });

        // Parse and display JSON results
        document.addEventListener('DOMContentLoaded', function() {
            const resultData = @Html.Raw(Model.Result != null ? JsonConvert.SerializeObject(Model.Result) : "null");

            if (resultData) {
                try {
                    const data = JSON.parse(resultData);

                    if (Array.isArray(data)) {
                        displayTableData(data);
                    } else {
                        displayTableData([data]);
                    }
                } catch (e) {
                    // If not valid JSON, just display as text
                    const pre = document.createElement('pre');
                    pre.textContent = resultData;
                    document.getElementById('resultsTableBody').innerHTML = '';
                    document.getElementById('resultsTableHead').innerHTML = '';
                    document.getElementById('resultsTableBody').appendChild(pre);
                }
            }
        });

        function displayTableData(data) {
            if (!data || data.length === 0) return;

            const thead = document.getElementById('resultsTableHead');
            const tbody = document.getElementById('resultsTableBody');

            // Clear previous results
            thead.innerHTML = '';
            tbody.innerHTML = '';

            // Create header row
            const headerRow = document.createElement('tr');
            const columns = Object.keys(data[0]);

            columns.forEach(column => {
                const th = document.createElement('th');
                th.textContent = column;
                headerRow.appendChild(th);
            });

            thead.appendChild(headerRow);

            // Create data rows
            data.forEach(row => {
                const tr = document.createElement('tr');

                columns.forEach(column => {
                    const td = document.createElement('td');
                    td.textContent = row[column] !== null ? row[column] : 'NULL';
                    tr.appendChild(td);
                });

                tbody.appendChild(tr);
            });
        }
    </script>
}