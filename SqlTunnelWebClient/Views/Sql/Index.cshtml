@using Newtonsoft.Json

@model SqlTunnelWebClient.Models.SqlViewModel
@inject SqlTunnelWebClient.Services.SettingsService SettingsService

@{
    ViewData["Title"] = "SQL Query Executor";
    var settings = SettingsService.GetSettings();
}

<div class="container">
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (Model.SelectedAgent != null)
    {
        <div class="card mb-4">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5>🚀 Selected SQL Agent (Streaming Enabled)</h5>
                <a href="@Url.Action("Index", "Home")" class="btn btn-sm btn-outline-primary">
                    <i class="bi bi-arrow-left"></i> Change Agent
                </a>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6">
                        <h6>@Model.SelectedAgent.DisplayName</h6>
                        <p>@Model.SelectedAgent.Description</p>
                        <p>
                            <span class="badge bg-info">Version: @Model.SelectedAgent.Version</span>
                            <span class="badge @(Model.SelectedAgent.IsActive ? "bg-success" : "bg-danger")">
                                @(Model.SelectedAgent.IsActive ? "Online" : "Offline")
                            </span>
                            <span class="badge bg-primary">⚡ Unlimited Streaming</span>
                        </p>
                    </div>
                    <div class="col-md-6">
                        <h6>Connection Info</h6>
                        <p class="text-muted small">@Model.SelectedAgent.ServerInfo</p>
                        <div class="alert alert-info small">
                            <strong>🚀 Performance Mode:</strong> This agent supports unlimited data streaming with optimized memory management.
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="alert alert-info mb-4">
            <h5>🎯 High-Performance SQL Execution</h5>
            <p>
                Queries are executed using <strong>optimized streaming technology</strong> with unlimited data handling.
                <a href="@Url.Action("Index", "Home")" class="alert-link">Select a specific agent</a> for more control.
            </p>
        </div>
    }

    <!-- 🚀 SIMPLIFIED: Clean query form -->
    <form asp-action="ExecuteQuery" method="post" id="queryForm">
        <input type="hidden" asp-for="RelayServerUrl" />
        <input type="hidden" asp-for="ApiKey" />
        <input type="hidden" asp-for="ServiceId" />

        <div class="card mb-4">
            <div class="card-header">
                <h5>⚡ SQL Query - Unlimited Streaming</h5>
            </div>
            <div class="card-body">
                <div class="mb-3">
                    <textarea asp-for="Query" class="form-control" rows="6"
                              placeholder="Enter your SQL query here... (No size limits - streaming enabled!)"></textarea>
                    <div class="form-text">
                        🚀 <strong>Performance tip:</strong> Large result sets are automatically streamed for optimal performance.
                    </div>
                </div>

                <div class="form-check mb-3">
                    <input asp-for="ShowParameters" class="form-check-input" id="showParameters" />
                    <label asp-for="ShowParameters" class="form-check-label">Use Parameters</label>
                </div>

                <div id="parametersSection" style="display: @(Model.ShowParameters ? "block" : "none");">
                    <div class="card">
                        <div class="card-body">
                            <h6 class="card-subtitle mb-3">Parameters</h6>
                            <div id="parameters">
                                @if (Model.Parameters != null)
                                {
                                    for (int i = 0; i < Model.Parameters.Count; i++)
                                    {
                                        <div class="row mb-2 align-items-end">
                                            <div class="col-md-3">
                                                <label class="form-label">Name:</label>
                                                <input asp-for="Parameters[i].Name" class="form-control" placeholder="e.g. @@ProductId" />
                                            </div>
                                            <div class="col-md-2">
                                                <label class="form-label">Type:</label>
                                                <select asp-for="Parameters[i].Type" class="form-select">
                                                    <option value="String">String</option>
                                                    <option value="Int">Int</option>
                                                    <option value="Decimal">Decimal</option>
                                                    <option value="DateTime">DateTime</option>
                                                    <option value="Bool">Bool</option>
                                                </select>
                                            </div>
                                            <div class="col-md-4">
                                                <label class="form-label">Value:</label>
                                                <input asp-for="Parameters[i].Value" class="form-control"
                                                       disabled="@Model.Parameters[i].IsNull" />
                                            </div>
                                            <div class="col-md-2">
                                                <div class="form-check">
                                                    <input asp-for="Parameters[i].IsNull" class="form-check-input parameter-null-check" />
                                                    <label asp-for="Parameters[i].IsNull" class="form-check-label">NULL</label>
                                                </div>
                                            </div>
                                            <div class="col-md-1">
                                                <button type="submit" asp-action="RemoveParameter" asp-route-index="@i"
                                                        class="btn btn-sm btn-danger">
                                                    X
                                                </button>
                                            </div>
                                        </div>
                                    }
                                }
                            </div>
                            <button type="submit" asp-action="AddParameter" class="btn btn-sm btn-secondary mt-2">
                                Add Parameter
                            </button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="card-footer">
                <button type="submit" class="btn btn-primary btn-lg" id="executeBtn">
                    <i class="bi bi-lightning-fill"></i> Execute Query (Streaming)
                </button>
                <a class="btn btn-success" href="@Url.Action("QueryResults", "Sql")">
                    <i class="bi bi-database-check"></i> View History
                </a>
                <div class="mt-2">
                    <small class="text-muted">
                        ⚡ Powered by optimized streaming technology - No data size limits
                    </small>
                </div>
            </div>
        </div>
    </form>

    <!-- 🚀 ENHANCED: Progress indicator -->
    <div id="progressIndicator" class="card mt-4" style="display: none;">
        <div class="card-body">
            <div class="d-flex align-items-center">
                <div class="spinner-border spinner-border-sm me-3" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <div>
                    <strong>Processing query...</strong>
                    <div class="small text-muted" id="progressText">Initializing optimized streaming...</div>
                </div>
            </div>
            <div class="progress mt-2" style="height: 6px;">
                <div class="progress-bar progress-bar-striped progress-bar-animated"
                     role="progressbar" style="width: 0%" id="progressBar"></div>
            </div>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(Model.Error))
    {
        <div class="alert alert-danger mt-4">
            <strong>Error:</strong> @Model.Error
        </div>
    }

    @if (!string.IsNullOrEmpty(Model.Result))
    {
        <div class="card mt-4">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5>🎉 Results (Streamed)</h5>
                <div class="export-buttons"></div>
            </div>
            <div class="card-body">
                <div class="row mb-3">
                    <div class="col-md-8">
                        <div class="input-group">
                            <span class="input-group-text">🔍 Global Search:</span>
                            <input type="text" id="globalSearch" class="form-control" placeholder="Search across all columns...">
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="input-group">
                            <span class="input-group-text">📊 Page Size:</span>
                            <select id="pageSize" class="form-select">
                                <option value="10">10</option>
                                <option value="25">25</option>
                                <option value="50">50</option>
                                <option value="100">100</option>
                                <option value="500">500</option>
                                <option value="-1">All</option>
                            </select>
                        </div>
                    </div>
                </div>
                <div class="table-responsive">
                    <table id="resultsTable" class="table table-striped table-hover">
                        <thead id="resultsTableHead"></thead>
                        <tbody id="resultsTableBody"></tbody>
                    </table>
                </div>
            </div>
        </div>
    }
</div>

@section Scripts {
    <script>
        // 🚀 SIMPLIFIED & OPTIMIZED JavaScript
        document.addEventListener('DOMContentLoaded', function() {
            console.log('🚀 SQL Query Executor - Optimized Version Loaded');

            // ✅ Parameters toggle
            const showParametersElement = document.getElementById('showParameters');
            const parametersSection = document.getElementById('parametersSection');

            if (showParametersElement && parametersSection) {
                showParametersElement.addEventListener('change', function() {
                    parametersSection.style.display = this.checked ? 'block' : 'none';
                });
            }

            // ✅ NULL checkboxes
            document.addEventListener('change', function(event) {
                if (event.target.classList.contains('parameter-null-check')) {
                    const valueInput = event.target.closest('.row').querySelector('input[name$=".Value"]');
                    if (valueInput) {
                        valueInput.disabled = event.target.checked;
                    }
                }
            });

            // ✅ Search functionality
            const globalSearchElement = document.getElementById('globalSearch');
            if (globalSearchElement) {
                globalSearchElement.addEventListener('keyup', function() {
                    const table = $('#resultsTable').DataTable();
                    if (table) {
                        table.search(this.value).draw();
                    }
                });
            }

            // ✅ Page size
            const pageSizeElement = document.getElementById('pageSize');
            if (pageSizeElement) {
                pageSizeElement.addEventListener('change', function() {
                    const table = $('#resultsTable').DataTable();
                    if (table) {
                        table.page.len(parseInt(this.value)).draw();
                    }
                });
            }

            // 🚀 ENHANCED: Form submission with progress
            const form = document.getElementById('queryForm');
            const executeBtn = document.getElementById('executeBtn');
            const progressIndicator = document.getElementById('progressIndicator');
            const progressText = document.getElementById('progressText');
            const progressBar = document.getElementById('progressBar');

            if (form && executeBtn) {
                form.addEventListener('submit', function(e) {
                    const query = document.querySelector('textarea[name="Query"]').value.trim();
                    if (!query) {
                        e.preventDefault();
                        alert('Please enter a SQL query');
                        return;
                    }

                    // Show enhanced progress
                    if (progressIndicator) {
                        progressIndicator.style.display = 'block';
                        executeBtn.disabled = true;
                        executeBtn.innerHTML = '<i class="bi bi-hourglass-split"></i> Processing...';

                        // Simulate progress updates
                        let progress = 0;
                        const progressInterval = setInterval(() => {
                            progress += Math.random() * 10;
                            if (progress > 90) progress = 90;

                            progressBar.style.width = progress + '%';

                            if (progress < 30) {
                                progressText.textContent = 'Connecting to SQL agent...';
                            } else if (progress < 60) {
                                progressText.textContent = 'Executing query with streaming...';
                            } else {
                                progressText.textContent = 'Processing results...';
                            }
                        }, 500);

                        // Clear interval after form submission
                        setTimeout(() => clearInterval(progressInterval), 1000);
                    }
                });
            }

            // ✅ Process existing results
            try {
        @if (Model.Result != null)
        {
            <text>
                        const resultData = @Html.Raw(Json.Serialize(Model.Result));
                        if (resultData) {
                            const data = typeof resultData === 'string' ? JSON.parse(resultData) : resultData;
                            if (Array.isArray(data) && data.length > 0) {
                                displayTableDataWithDataTables(data);
                                console.log('✅ Displayed', data.length, 'rows from streaming results');
                            } else if (typeof data === 'object' && data !== null) {
                                displayTableDataWithDataTables([data]);
                            }
                        }
            </text>
        }
            } catch (e) {
                console.error("❌ Error processing results:", e);
            }
        });

        // 🚀 OPTIMIZED: Enhanced DataTables with better performance
        function displayTableDataWithDataTables(data) {
            if (!data || data.length === 0) return;

            const table = $('#resultsTable');
            if (!table.length) return;

            // Create columns
            const columns = Object.keys(data[0]).map(key => ({
                title: key,
                data: key
            }));

            // Destroy existing DataTable
            if ($.fn.DataTable.isDataTable(table)) {
                table.DataTable().destroy();
            }

            table.empty();

            // 🚀 ENHANCED: Better DataTable configuration for large datasets
            const dataTable = table.DataTable({
                data: data,
                columns: columns,
                pageLength: 10, // Increased default
                lengthMenu: [[10, 25, 50, 100, 500, -1], [10, 25, 50, 100, 500, "All"]],
                dom: 'Blfrtip',
                processing: true, // Show processing indicator
                deferRender: true, // Improve performance for large datasets
                buttons: [
                    {
                        extend: 'collection',
                        text: '📊 Export Data',
                        className: 'btn btn-primary dropdown-toggle',
                        buttons: [
                            {
                                extend: 'excelHtml5',
                                text: '📑 Excel',
                                exportOptions: { columns: ':visible' },
                                title: 'SQL Results - ' + new Date().toLocaleString(),
                                className: 'dropdown-item'
                            },
                            {
                                extend: 'csvHtml5',
                                text: '📋 CSV',
                                exportOptions: { columns: ':visible' },
                                className: 'dropdown-item'
                            },
                            {
                                extend: 'copyHtml5',
                                text: '📄 Copy',
                                exportOptions: { columns: ':visible' },
                                className: 'dropdown-item'
                            }
                        ]
                    }
                ],
                language: {
                    search: "🔍 Filter:",
                    lengthMenu: "📊 Show _MENU_ rows",
                    info: "Showing _START_ to _END_ of _TOTAL_ rows (Streamed)",
                    processing: "⚡ Processing large dataset..."
                },
                initComplete: function() {
                    // Move export buttons
                    const exportButtons = $('.dt-buttons');
                    const exportArea = $('.export-buttons');
                    if (exportButtons.length && exportArea.length) {
                        exportButtons.detach().appendTo(exportArea);
                    }

                    // Show success message
                    const rowCount = this.api().data().length;
                    console.log('🎉 DataTable initialized with', rowCount, 'rows');

                    // Add performance info
                    const infoElement = $('.dataTables_info');
                    if (infoElement.length && rowCount > 1000) {
                        infoElement.append(' <span class="badge bg-success ms-2">⚡ Optimized for large datasets</span>');
                    }
                }
            });

            // 🚀 ENHANCED: Smart column filters (only for smaller datasets)
            if (data.length <= 10000) {
                $('#resultsTable thead tr').clone(true).appendTo('#resultsTable thead');
                $('#resultsTable thead tr:eq(1) th').each(function(i) {
                    const title = $(this).text();
                    $(this).html('<input type="text" class="form-control form-control-sm" placeholder="Filter ' + title + '" />');

                    $('input', this).on('keyup change', function() {
                        if (dataTable.column(i).search() !== this.value) {
                            dataTable.column(i).search(this.value).draw();
                        }
                    });
                });
            }
        }
    </script>
}